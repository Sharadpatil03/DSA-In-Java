Given an array of integers arr[]  and a number k. Return the maximum sum of a subarray of size k.

Note: A subarray is a contiguous part of any given array.

Examples:

Input: arr[] = [100, 200, 300, 400] , k = 2
Output: 700
Explanation: arr3  + arr4 = 700, which is maximum.


// User function Template for Java

class Solution {
    public int maximumSumSubarray(int[] arr, int k) {
        //Use here two pointer approach :
        
        int n=arr.length;
        //edge case :
        if(k >n){
            return -1;
        }
        
        int left=0, right=0;
        int windowSum=0, maxSum=0;
        
        while(right < n){
            windowSum +=arr[right];
            
            // till the window size, just expand
            if(right -left + 1 <k){
                right++;
            }
            
            // when we get the window size
            else if( right-left+1==k){
                maxSum = Math.max(maxSum, windowSum);
                //now deduct left side and add right side element
                windowSum -=arr[left];
                left++;
                right++;
               // maxSum +=arr[right];
            }
        }
        
        return maxSum;
        
        
        
    }
}
